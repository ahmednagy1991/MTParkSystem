/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ArgumentException, BarcodeFormat, DecodeHintType } from '@zxing/library';
import { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';
var ZXingScannerComponent = /** @class */ (function () {
    /**
     * Constructor to build the object and do some DI.
     */
    function ZXingScannerComponent() {
        /**
         * How the preview element shoud be fit inside the :host container.
         */
        this.previewFitMode = 'cover';
        // instance based emitters
        this.autostarted = new EventEmitter();
        this.autostarting = new EventEmitter();
        this.torchCompatible = new EventEmitter();
        this.scanSuccess = new EventEmitter();
        this.scanFailure = new EventEmitter();
        this.scanError = new EventEmitter();
        this.scanComplete = new EventEmitter();
        this.camerasFound = new EventEmitter();
        this.camerasNotFound = new EventEmitter();
        this.permissionResponse = new EventEmitter(true);
        this.hasDevices = new EventEmitter();
        this.deviceChange = new EventEmitter();
        this._device = null;
        this._enabled = true;
        this._hints = new Map();
        this.autofocusEnabled = true;
        this.autostart = true;
        this.formats = [BarcodeFormat.QR_CODE];
        // computed data
        this.hasNavigator = typeof navigator !== 'undefined';
        this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;
    }
    Object.defineProperty(ZXingScannerComponent.prototype, "codeReader", {
        /**
         * Exposes the current code reader, so the user can use it's APIs.
         */
        get: /**
         * Exposes the current code reader, so the user can use it's APIs.
         * @return {?}
         */
        function () {
            return this._codeReader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "device", {
        /**
         * User device acessor.
         */
        get: /**
         * User device acessor.
         * @return {?}
         */
        function () {
            return this._device;
        },
        /**
         * User device input
         */
        set: /**
         * User device input
         * @param {?} device
         * @return {?}
         */
        function (device) {
            if (!device && device !== null) {
                throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');
            }
            if (this.isCurrentDevice(device)) {
                console.warn('Setting the same device is not allowed.');
                return;
            }
            if (this.isAutostarting) {
                // do not allow setting devices during auto-start, since it will set one and emit it.
                console.warn('Avoid setting a device during auto-start.');
                return;
            }
            if (!this.hasPermission) {
                console.warn('Permissions not set yet, waiting for them to be set to apply device change.');
                // this.permissionResponse
                //   .pipe(
                //     take(1),
                //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))
                //   )
                //   .subscribe(() => this.device = device);
                // return;
            }
            // in order to change the device the codeReader gotta be reseted
            this._reset();
            this._device = device;
            // if enabled, starts scanning
            if (this._enabled && device !== null) {
                this.scanFromDevice(device.deviceId);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "formats", {
        /**
         * Returns all the registered formats.
         */
        get: /**
         * Returns all the registered formats.
         * @return {?}
         */
        function () {
            return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);
        },
        /**
         * Registers formats the scanner should support.
         *
         * @param input BarcodeFormat or case-insensitive string array.
         */
        set: /**
         * Registers formats the scanner should support.
         *
         * @param {?} input BarcodeFormat or case-insensitive string array.
         * @return {?}
         */
        function (input) {
            var _this = this;
            if (typeof input === 'string') {
                throw new Error('Invalid formats, make sure the [formats] input is a binding.');
            }
            // formats may be set from html template as BarcodeFormat or string array
            /** @type {?} */
            var formats = input.map(function (f) { return _this.getBarcodeFormatOrFail(f); });
            /** @type {?} */
            var hints = this.hints;
            // updates the hints
            hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);
            this.hints = hints;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "hints", {
        /**
         * Returns all the registered hints.
         */
        get: /**
         * Returns all the registered hints.
         * @return {?}
         */
        function () {
            return this._hints;
        },
        /**
         * Does what it takes to set the hints.
         */
        set: /**
         * Does what it takes to set the hints.
         * @param {?} hints
         * @return {?}
         */
        function (hints) {
            this._hints = hints;
            // @note avoid restarting the code reader when possible
            // new instance with new hints.
            this.restart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "isAutostarting", {
        /**
         *
         */
        set: /**
         *
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this._isAutostarting = state;
            this.autostarting.next(state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "isAutstarting", {
        /**
         *
         */
        get: /**
         *
         * @return {?}
         */
        function () {
            return this._isAutostarting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "torch", {
        /**
         * Allow start scan or not.
         */
        set: /**
         * Allow start scan or not.
         * @param {?} on
         * @return {?}
         */
        function (on) {
            this.getCodeReader().setTorch(on);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "enable", {
        /**
         * Allow start scan or not.
         */
        set: /**
         * Allow start scan or not.
         * @param {?} enabled
         * @return {?}
         */
        function (enabled) {
            this._enabled = Boolean(enabled);
            if (!this._enabled) {
                this.reset();
            }
            else if (this.device) {
                this.scanFromDevice(this.device.deviceId);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "enabled", {
        /**
         * Tells if the scanner is enabled or not.
         */
        get: /**
         * Tells if the scanner is enabled or not.
         * @return {?}
         */
        function () {
            return this._enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZXingScannerComponent.prototype, "tryHarder", {
        /**
         * If is `tryHarder` enabled.
         */
        get: /**
         * If is `tryHarder` enabled.
         * @return {?}
         */
        function () {
            return this.hints.get(DecodeHintType.TRY_HARDER);
        },
        /**
         * Enable/disable tryHarder hint.
         */
        set: /**
         * Enable/disable tryHarder hint.
         * @param {?} enable
         * @return {?}
         */
        function (enable) {
            /** @type {?} */
            var hints = this.hints;
            if (enable) {
                hints.set(DecodeHintType.TRY_HARDER, true);
            }
            else {
                hints.delete(DecodeHintType.TRY_HARDER);
            }
            this.hints = hints;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets and registers all cammeras.
     */
    /**
     * Gets and registers all cammeras.
     * @return {?}
     */
    ZXingScannerComponent.prototype.askForPermission = /**
     * Gets and registers all cammeras.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var stream, permission, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hasNavigator) {
                            console.error('@zxing/ngx-scanner', 'Can\'t ask permission, navigator is not present.');
                            this.setPermission(null);
                            return [2 /*return*/, this.hasPermission];
                        }
                        if (!this.isMediaDevicesSuported) {
                            console.error('@zxing/ngx-scanner', 'Can\'t get user media, this is not supported.');
                            this.setPermission(null);
                            return [2 /*return*/, this.hasPermission];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.getAnyVideoDevice()];
                    case 2:
                        // Will try to ask for permission
                        stream = _a.sent();
                        permission = !!stream;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, this.handlePermissionException(err_1)];
                    case 4:
                        this.terminateStream(stream);
                        return [7 /*endfinally*/];
                    case 5:
                        this.setPermission(permission);
                        // Returns the permission
                        return [2 /*return*/, permission];
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    ZXingScannerComponent.prototype.getAnyVideoDevice = /**
     *
     * @return {?}
     */
    function () {
        return navigator.mediaDevices.getUserMedia({ video: true });
    };
    /**
     * Terminates a stream and it's tracks.
     */
    /**
     * Terminates a stream and it's tracks.
     * @param {?} stream
     * @return {?}
     */
    ZXingScannerComponent.prototype.terminateStream = /**
     * Terminates a stream and it's tracks.
     * @param {?} stream
     * @return {?}
     */
    function (stream) {
        if (stream) {
            stream.getTracks().forEach(function (t) { return t.stop(); });
        }
        stream = undefined;
    };
    /**
     * Initializes the component without starting the scanner.
     */
    /**
     * Initializes the component without starting the scanner.
     * @return {?}
     */
    ZXingScannerComponent.prototype.initAutostartOff = /**
     * Initializes the component without starting the scanner.
     * @return {?}
     */
    function () {
        // do not ask for permission when autostart is off
        this.isAutostarting = null;
        // just update devices information
        this.updateVideoInputDevices();
    };
    /**
     * Initializes the component and starts the scanner.
     * Permissions are asked to accomplish that.
     */
    /**
     * Initializes the component and starts the scanner.
     * Permissions are asked to accomplish that.
     * @return {?}
     */
    ZXingScannerComponent.prototype.initAutostartOn = /**
     * Initializes the component and starts the scanner.
     * Permissions are asked to accomplish that.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hasPermission, e_1, devices;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isAutostarting = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.askForPermission()];
                    case 2:
                        // Asks for permission before enumerating devices so it can get all the device's info
                        hasPermission = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error(e_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (!hasPermission) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.updateVideoInputDevices()];
                    case 5:
                        devices = _a.sent();
                        this.autostartScanner(tslib_1.__spread(devices));
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if the given device is the current defined one.
     */
    /**
     * Checks if the given device is the current defined one.
     * @param {?} device
     * @return {?}
     */
    ZXingScannerComponent.prototype.isCurrentDevice = /**
     * Checks if the given device is the current defined one.
     * @param {?} device
     * @return {?}
     */
    function (device) {
        return this.device && device && device.deviceId === this.device.deviceId;
    };
    /**
     * Executed after the view initialization.
     */
    /**
     * Executed after the view initialization.
     * @return {?}
     */
    ZXingScannerComponent.prototype.ngAfterViewInit = /**
     * Executed after the view initialization.
     * @return {?}
     */
    function () {
        var _this = this;
        // makes torch availability information available to user
        this.getCodeReader().isTorchAvailable.subscribe(function (x) { return _this.torchCompatible.emit(x); });
        if (!this.autostart) {
            console.warn('New feature \'autostart\' disabled, be careful. Permissions and devices recovery has to be run manually.');
            // does the necessary configuration without autostarting
            this.initAutostartOff();
            return;
        }
        // configurates the component and starts the scanner
        this.initAutostartOn();
    };
    /**
     * Executes some actions before destroy the component.
     */
    /**
     * Executes some actions before destroy the component.
     * @return {?}
     */
    ZXingScannerComponent.prototype.ngOnDestroy = /**
     * Executes some actions before destroy the component.
     * @return {?}
     */
    function () {
        this.reset();
    };
    /**
     * Stops old `codeReader` and starts scanning in a new one.
     */
    /**
     * Stops old `codeReader` and starts scanning in a new one.
     * @return {?}
     */
    ZXingScannerComponent.prototype.restart = /**
     * Stops old `codeReader` and starts scanning in a new one.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var prevDevice = this._reset();
        if (!prevDevice) {
            return;
        }
        // @note apenas necessario por enquanto causa da Torch
        this._codeReader = undefined;
        this.device = prevDevice;
    };
    /**
     * Discovers and updates known video input devices.
     */
    /**
     * Discovers and updates known video input devices.
     * @return {?}
     */
    ZXingScannerComponent.prototype.updateVideoInputDevices = /**
     * Discovers and updates known video input devices.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var devices, hasDevices;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // permissions aren't needed to get devices, but to access them and their info
                        return [4 /*yield*/, this.getCodeReader().listVideoInputDevices()];
                    case 1:
                        devices = (_a.sent()) || [];
                        hasDevices = devices && devices.length > 0;
                        // stores discovered devices and updates information
                        this.hasDevices.next(hasDevices);
                        this.camerasFound.next(tslib_1.__spread(devices));
                        if (!hasDevices) {
                            this.camerasNotFound.next();
                        }
                        return [2 /*return*/, devices];
                }
            });
        });
    };
    /**
     * Starts the scanner with the first available device.
     */
    /**
     * Starts the scanner with the first available device.
     * @param {?} devices
     * @return {?}
     */
    ZXingScannerComponent.prototype.autostartScanner = /**
     * Starts the scanner with the first available device.
     * @param {?} devices
     * @return {?}
     */
    function (devices) {
        /** @type {?} */
        var matcher = function (_a) {
            var label = _a.label;
            return /back|trás|rear|traseira|environment|ambiente/gi.test(label);
        };
        // tries to find the rear camera.
        /** @type {?} */
        var device = devices.find(matcher);
        if (!device && devices.length) {
            device = devices.pop();
        }
        if (!device) {
            throw new Error('Implossible to autostart, no input devices available.');
        }
        this.device = device;
        // @note when listening to this change, callback code will sometimes run before the previous line.
        this.deviceChange.emit(device);
        this.isAutostarting = false;
        this.autostarted.next();
    };
    /**
     * Dispatches the scan success event.
     *
     * @param result the scan result.
     */
    /**
     * Dispatches the scan success event.
     *
     * @param {?} result the scan result.
     * @return {?}
     */
    ZXingScannerComponent.prototype.dispatchScanSuccess = /**
     * Dispatches the scan success event.
     *
     * @param {?} result the scan result.
     * @return {?}
     */
    function (result) {
        this.scanSuccess.next(result.getText());
    };
    /**
     * Dispatches the scan failure event.
     */
    /**
     * Dispatches the scan failure event.
     * @param {?=} reason
     * @return {?}
     */
    ZXingScannerComponent.prototype.dispatchScanFailure = /**
     * Dispatches the scan failure event.
     * @param {?=} reason
     * @return {?}
     */
    function (reason) {
        this.scanFailure.next(reason);
    };
    /**
     * Dispatches the scan error event.
     *
     * @param err the error thing.
     */
    /**
     * Dispatches the scan error event.
     *
     * @param {?} error
     * @return {?}
     */
    ZXingScannerComponent.prototype.dispatchScanError = /**
     * Dispatches the scan error event.
     *
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.scanError.next(error);
    };
    /**
     * Dispatches the scan event.
     *
     * @param result the scan result.
     */
    /**
     * Dispatches the scan event.
     *
     * @param {?} result the scan result.
     * @return {?}
     */
    ZXingScannerComponent.prototype.dispatchScanComplete = /**
     * Dispatches the scan event.
     *
     * @param {?} result the scan result.
     * @return {?}
     */
    function (result) {
        this.scanComplete.next(result);
    };
    /**
     * Returns the filtered permission.
     */
    /**
     * Returns the filtered permission.
     * @param {?} err
     * @return {?}
     */
    ZXingScannerComponent.prototype.handlePermissionException = /**
     * Returns the filtered permission.
     * @param {?} err
     * @return {?}
     */
    function (err) {
        // failed to grant permission to video input
        console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);
        /** @type {?} */
        var permission;
        switch (err.name) {
            // usually caused by not secure origins
            case 'NotSupportedError':
                console.warn('@zxing/ngx-scanner', err.message);
                // could not claim
                permission = null;
                // can't check devices
                this.hasDevices.next(null);
                break;
            // user denied permission
            case 'NotAllowedError':
                console.warn('@zxing/ngx-scanner', err.message);
                // claimed and denied permission
                permission = false;
                // this means that input devices exists
                this.hasDevices.next(true);
                break;
            // the device has no attached input devices
            case 'NotFoundError':
                console.warn('@zxing/ngx-scanner', err.message);
                // no permissions claimed
                permission = null;
                // because there was no devices
                this.hasDevices.next(false);
                // tells the listener about the error
                this.camerasNotFound.next(err);
                break;
            case 'NotReadableError':
                console.warn('@zxing/ngx-scanner', 'Couldn\'t read the device(s)\'s stream, it\'s probably in use by another app.');
                // no permissions claimed
                permission = null;
                // there are devices, which I couldn't use
                this.hasDevices.next(false);
                // tells the listener about the error
                this.camerasNotFound.next(err);
                break;
            default:
                console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);
                // unknown
                permission = null;
                // this.hasDevices.next(undefined;
                break;
        }
        this.setPermission(permission);
        // tells the listener about the error
        this.permissionResponse.error(err);
        return permission;
    };
    /**
     * Returns a valid BarcodeFormat or fails.
     */
    /**
     * Returns a valid BarcodeFormat or fails.
     * @param {?} format
     * @return {?}
     */
    ZXingScannerComponent.prototype.getBarcodeFormatOrFail = /**
     * Returns a valid BarcodeFormat or fails.
     * @param {?} format
     * @return {?}
     */
    function (format) {
        return typeof format === 'string'
            ? BarcodeFormat[format.trim().toUpperCase()]
            : format;
    };
    /**
     * Retorna um code reader, cria um se nenhume existe.
     */
    /**
     * Retorna um code reader, cria um se nenhume existe.
     * @return {?}
     */
    ZXingScannerComponent.prototype.getCodeReader = /**
     * Retorna um code reader, cria um se nenhume existe.
     * @return {?}
     */
    function () {
        if (!this._codeReader) {
            this._codeReader = new BrowserMultiFormatContinuousReader(this.hints);
        }
        return this._codeReader;
    };
    /**
     * Starts the continuous scanning for the given device.
     *
     * @param deviceId The deviceId from the device.
     */
    /**
     * Starts the continuous scanning for the given device.
     *
     * @param {?} deviceId The deviceId from the device.
     * @return {?}
     */
    ZXingScannerComponent.prototype.scanFromDevice = /**
     * Starts the continuous scanning for the given device.
     *
     * @param {?} deviceId The deviceId from the device.
     * @return {?}
     */
    function (deviceId) {
        var _this = this;
        /** @type {?} */
        var videoElement = this.previewElemRef.nativeElement;
        /** @type {?} */
        var codeReader = this.getCodeReader();
        /** @type {?} */
        var decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);
        if (!decodingStream) {
            throw new Error('Undefined decoding stream, aborting.');
        }
        /** @type {?} */
        var next = function (x) { return _this._onDecodeResult(x.result, x.error); };
        /** @type {?} */
        var error = function (err) { return _this._onDecodeError(err); };
        /** @type {?} */
        var complete = function () { _this.reset(); console.log('completed'); };
        decodingStream.subscribe(next, error, complete);
    };
    /**
     * Handles decode errors.
     */
    /**
     * Handles decode errors.
     * @param {?} err
     * @return {?}
     */
    ZXingScannerComponent.prototype._onDecodeError = /**
     * Handles decode errors.
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.dispatchScanError(err);
        this.reset();
    };
    /**
     * Handles decode results.
     */
    /**
     * Handles decode results.
     * @param {?} result
     * @param {?} error
     * @return {?}
     */
    ZXingScannerComponent.prototype._onDecodeResult = /**
     * Handles decode results.
     * @param {?} result
     * @param {?} error
     * @return {?}
     */
    function (result, error) {
        if (result) {
            this.dispatchScanSuccess(result);
        }
        else {
            this.dispatchScanFailure(error);
        }
        this.dispatchScanComplete(result);
    };
    /**
     * Stops the code reader and returns the previous selected device.
     */
    /**
     * Stops the code reader and returns the previous selected device.
     * @return {?}
     */
    ZXingScannerComponent.prototype._reset = /**
     * Stops the code reader and returns the previous selected device.
     * @return {?}
     */
    function () {
        if (!this._codeReader) {
            return;
        }
        /** @type {?} */
        var device = this.device;
        // do not set this.device inside this method, it would create a recursive loop
        this._device = null;
        this._codeReader.reset();
        return device;
    };
    /**
     * Resets the scanner and emits device change.
     */
    /**
     * Resets the scanner and emits device change.
     * @return {?}
     */
    ZXingScannerComponent.prototype.reset = /**
     * Resets the scanner and emits device change.
     * @return {?}
     */
    function () {
        this._reset();
        this.deviceChange.emit(null);
    };
    /**
     * Sets the permission value and emmits the event.
     */
    /**
     * Sets the permission value and emmits the event.
     * @param {?} hasPermission
     * @return {?}
     */
    ZXingScannerComponent.prototype.setPermission = /**
     * Sets the permission value and emmits the event.
     * @param {?} hasPermission
     * @return {?}
     */
    function (hasPermission) {
        this.hasPermission = hasPermission;
        this.permissionResponse.next(hasPermission);
    };
    ZXingScannerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'zxing-scanner',
                    template: "<video #preview [style.object-fit]=\"previewFitMode\">\r\n  <p>\r\n    Your browser does not support this feature, please try to upgrade it.\r\n  </p>\r\n  <p>\r\n    Seu navegador n\u00E3o suporta este recurso, por favor tente atualiz\u00E1-lo.\r\n  </p>\r\n</video>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}video{width:100%;height:auto;-o-object-fit:contain;object-fit:contain}"]
                }] }
    ];
    /** @nocollapse */
    ZXingScannerComponent.ctorParameters = function () { return []; };
    ZXingScannerComponent.propDecorators = {
        previewElemRef: [{ type: ViewChild, args: ['preview',] }],
        autofocusEnabled: [{ type: Input }],
        autostarted: [{ type: Output }],
        autostarting: [{ type: Output }],
        autostart: [{ type: Input }],
        previewFitMode: [{ type: Input }],
        torchCompatible: [{ type: Output }],
        scanSuccess: [{ type: Output }],
        scanFailure: [{ type: Output }],
        scanError: [{ type: Output }],
        scanComplete: [{ type: Output }],
        camerasFound: [{ type: Output }],
        camerasNotFound: [{ type: Output }],
        permissionResponse: [{ type: Output }],
        hasDevices: [{ type: Output }],
        device: [{ type: Input }],
        deviceChange: [{ type: Output }],
        formats: [{ type: Input }],
        torch: [{ type: Input }],
        enable: [{ type: Input }],
        tryHarder: [{ type: Input }]
    };
    return ZXingScannerComponent;
}());
export { ZXingScannerComponent };
if (false) {
    /**
     * Supported Hints map.
     * @type {?}
     */
    ZXingScannerComponent.prototype._hints;
    /**
     * The ZXing code reader.
     * @type {?}
     */
    ZXingScannerComponent.prototype._codeReader;
    /**
     * The device that should be used to scan things.
     * @type {?}
     */
    ZXingScannerComponent.prototype._device;
    /**
     * The device that should be used to scan things.
     * @type {?}
     */
    ZXingScannerComponent.prototype._enabled;
    /**
     *
     * @type {?}
     */
    ZXingScannerComponent.prototype._isAutostarting;
    /**
     * Has `navigator` access.
     * @type {?}
     */
    ZXingScannerComponent.prototype.hasNavigator;
    /**
     * Says if some native API is supported.
     * @type {?}
     */
    ZXingScannerComponent.prototype.isMediaDevicesSuported;
    /**
     * If the user-agent allowed the use of the camera or not.
     * @type {?}
     */
    ZXingScannerComponent.prototype.hasPermission;
    /**
     * Reference to the preview element, should be the `video` tag.
     * @type {?}
     */
    ZXingScannerComponent.prototype.previewElemRef;
    /**
     * Enable or disable autofocus of the camera (might have an impact on performance)
     * @type {?}
     */
    ZXingScannerComponent.prototype.autofocusEnabled;
    /**
     * Emits when and if the scanner is autostarted.
     * @type {?}
     */
    ZXingScannerComponent.prototype.autostarted;
    /**
     * True during autostart and false after. It will be null if won't autostart at all.
     * @type {?}
     */
    ZXingScannerComponent.prototype.autostarting;
    /**
     * If the scanner should autostart with the first available device.
     * @type {?}
     */
    ZXingScannerComponent.prototype.autostart;
    /**
     * How the preview element shoud be fit inside the :host container.
     * @type {?}
     */
    ZXingScannerComponent.prototype.previewFitMode;
    /**
     * Emitts events when the torch compatibility is changed.
     * @type {?}
     */
    ZXingScannerComponent.prototype.torchCompatible;
    /**
     * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.
     * @type {?}
     */
    ZXingScannerComponent.prototype.scanSuccess;
    /**
     * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.
     * @type {?}
     */
    ZXingScannerComponent.prototype.scanFailure;
    /**
     * Emitts events when a scan throws some error, will inject the error to the callback.
     * @type {?}
     */
    ZXingScannerComponent.prototype.scanError;
    /**
     * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.
     * @type {?}
     */
    ZXingScannerComponent.prototype.scanComplete;
    /**
     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.
     * @type {?}
     */
    ZXingScannerComponent.prototype.camerasFound;
    /**
     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.
     * @type {?}
     */
    ZXingScannerComponent.prototype.camerasNotFound;
    /**
     * Emitts events when the users answers for permission.
     * @type {?}
     */
    ZXingScannerComponent.prototype.permissionResponse;
    /**
     * Emitts events when has devices status is update.
     * @type {?}
     */
    ZXingScannerComponent.prototype.hasDevices;
    /**
     * Emits when the current device is changed.
     * @type {?}
     */
    ZXingScannerComponent.prototype.deviceChange;
}
//# sourceMappingURL=data:application/json;base64,