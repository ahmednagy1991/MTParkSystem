/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T, L
 */
var  /**
 * @template T, L
 */
HashTable = /** @class */ (function () {
    function HashTable() {
        this.table = {};
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    HashTable.prototype.put = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.table['v_' + key] = value;
        return this;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HashTable.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.table['v_' + key];
    };
    /**
     * @return {?}
     */
    HashTable.prototype.getAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ vector = Array.from(Object.keys(this.table), function (k) { return _this.table[k]; });
        return vector;
    };
    /**
     * @return {?}
     */
    HashTable.prototype.getKeys = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ keys = Array.from(Object.keys(this.table), function (k) { return k.substring(2); });
        return keys;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HashTable.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (typeof this.table['v_' + key] !== 'undefined') {
            return true;
        }
        return false;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HashTable.prototype.remove = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        delete this.table['v_' + key];
        return this;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    HashTable.prototype.putArray = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (typeof this.table['a_' + key] === 'undefined') {
            this.table['a_' + key] = [];
        }
        this.table['a_' + key].push(value);
        return this;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HashTable.prototype.getArray = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (typeof this.table['a_' + key] === 'undefined') {
            this.table['a_' + key] = [];
        }
        return this.table['a_' + key];
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    HashTable.prototype.removeArray = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            this.table['a_' + key].splice(this.table['a_' + key].indexOf(value), 1);
        }
        return this;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HashTable.prototype.hasArray = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    HashTable.prototype.hasinArray = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            if (this.table['a_' + key].indexOf(value) !== -1) {
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    HashTable.prototype.size = /**
     * @return {?}
     */
    function () {
        return Object.keys(this.table).length;
    };
    /**
     * ***********************************************
     * @param {?} callback
     * @return {?}
     */
    HashTable.prototype.forEach = /**
     * ***********************************************
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        for (var /** @type {?} */ key in this.table) {
            callback(key.substring(2), this.table[key]);
        }
    };
    return HashTable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HashTable };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oYXNodGFibGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXItaGFzaHRhYmxlL2xpYi9hbmd1bGFyLWhhc2h0YWJsZS5jbGFzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGNsYXNzIGRlZmluaXRpb24uXG4qL1xuZXhwb3J0IGNsYXNzIEhhc2hUYWJsZTxULCBMPiB7XG4gICAgcHJpdmF0ZSB0YWJsZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB7fTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHV0KGtleTogVCwgdmFsdWU6IEwpOiBIYXNoVGFibGU8VCwgTD4ge1xuICAgICAgICB0aGlzLnRhYmxlWyd2XycgKyBrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBUKTogTCB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxlWyd2XycgKyBrZXldO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGwoKTogTFtdIHtcbiAgICAgICAgY29uc3QgdmVjdG9yID0gQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLnRhYmxlKSwgayA9PiB0aGlzLnRhYmxlW2tdKTtcbiAgICAgICAgcmV0dXJuIHZlY3RvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0S2V5cygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKE9iamVjdC5rZXlzKHRoaXMudGFibGUpLCBrID0+IGsuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfVxuXG4gICAgcHVibGljIGhhcyhrZXk6IFQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWyd2XycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoa2V5OiBUKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGFibGVbJ3ZfJyArIGtleV07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBwdXRBcnJheShrZXk6IFQsIHZhbHVlOiBMKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFibGVbJ2FfJyArIGtleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBcnJheShrZXk6IFQpOiBMIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxlWydhXycgKyBrZXldO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVBcnJheShrZXk6IFQsIHZhbHVlOiBMKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XS5zcGxpY2UodGhpcy50YWJsZVsnYV8nICsga2V5XS5pbmRleE9mKHZhbHVlKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGhhc0FycmF5KGtleTogVCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFibGVbJ2FfJyArIGtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBoYXNpbkFycmF5KGtleTogVCwgdmFsdWU6IEwpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFibGVbJ2FfJyArIGtleV0uaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50YWJsZSkubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLy8gRm9yRWFjaCBGdW5jdGlvblxuICAgIC8vIGZvckVhY2goY2FsbGJhY2s6IGZ1bmN0aW9uKGtleSx2YWx1ZSkgKVxuICAgIC8vIEBjYWxsYmFjazogQSBDYWxsYmFjayBmdW5jdGlvbiB1c2UgdG8gaXRlcmF0ZSB0aGUgT2JqZWN0ICBcbiAgICAvL1xuICAgIC8vIEl0ZXJhdGUgYWxsIG9iamVjdHMgSGFzaHRhYmxlXG4gICAgLy8gQSB1c2VkIGxpa2UgYXJndW1lbnRzIGluIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgcHVibGljIGZvckVhY2goY2FsbGJhY2spOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGFibGUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGtleS5zdWJzdHJpbmcoMiksIHRoaXMudGFibGVba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOzs7QUFBQTtJQUdJO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7S0FDbkI7Ozs7OztJQUVNLHVCQUFHOzs7OztjQUFDLEdBQU0sRUFBRSxLQUFRO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQzs7Ozs7O0lBR1QsdUJBQUc7Ozs7Y0FBQyxHQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQzs7Ozs7SUFHM0IsMEJBQU07Ozs7O1FBQ1QscUJBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztRQUN2RSxPQUFPLE1BQU0sQ0FBQzs7Ozs7SUFHWCwyQkFBTzs7OztRQUNWLHFCQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBQSxDQUFDLENBQUM7UUFDdEUsT0FBTyxJQUFJLENBQUM7Ozs7OztJQUdULHVCQUFHOzs7O2NBQUMsR0FBTTtRQUNiLElB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