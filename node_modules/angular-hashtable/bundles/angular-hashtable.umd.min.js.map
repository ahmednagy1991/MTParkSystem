{"version":3,"sources":["ng://angular-hashtable/lib/angular-hashtable.class.ts"],"names":["HashTable","this","table","prototype","put","key","value","get","getAll","Array","from","Object","keys","k","_this","getKeys","substring","has","remove","putArray","push","getArray","removeArray","splice","indexOf","hasArray","hasinArray","size","length","forEach","callback"],"mappings":"2NAGA,IAAAA,EAAA,WAGI,SAAAA,IACIC,KAAKC,MAAQ,UAGVF,EAAAG,UAAAC,aAAIC,EAAQC,GAEf,OADAL,KAAKC,MAAM,KAAOG,GAAOC,EAClBL,MAGJD,EAAAG,UAAAI,aAAIF,GACP,OAAOJ,KAAKC,MAAM,KAAOG,IAGtBL,EAAAG,UAAAK,6BAEH,OADeC,MAAMC,KAAKC,OAAOC,KAAKX,KAAKC,OAAQ,SAAAW,GAAK,OAAAC,EAAKZ,MAAMW,MAIhEb,EAAAG,UAAAY,mBAEH,OADaN,MAAMC,KAAKC,OAAOC,KAAKX,KAAKC,OAAQ,SAAAW,GAAK,OAAAA,EAAEG,UAAU,MAI/DhB,EAAAG,UAAAc,aAAIZ,GACP,MAAsC,oBAA3BJ,KAAKC,MAAM,KAAOG,IAM1BL,EAAAG,UAAAe,gBAAOb,GAEV,cADOJ,KAAKC,MAAM,KAAOG,GAClBJ,MAGJD,EAAAG,UAAAgB,kBAASd,EAAQC,GAKpB,MAJsC,oBAA3BL,KAAKC,MAAM,KAAOG,KACzBJ,KAAKC,MAAM,KAAOG,GAAO,IAE7BJ,KAAKC,MAAM,KAAOG,GAAKe,KAAKd,GACrBL,MAGJD,EAAAG,UAAAkB,kBAAShB,GAIZ,MAHsC,oBAA3BJ,KAAKC,MAAM,KAAOG,KACzBJ,KAAKC,MAAM,KAAOG,GAAO,IAEtBJ,KAAKC,MAAM,KAAOG,IAGtBL,EAAAG,UAAAmB,qBAAYjB,EAAQC,GAIvB,MAHsC,oBAA3BL,KAAKC,MAAM,KAAOG,IACzBJ,KAAKC,MAAM,KAAOG,GAAKkB,OAAOtB,KAAKC,MAAM,KAAOG,GAAKmB,QAAQlB,GAAQ,GAElEL,MAGJD,EAAAG,UAAAsB,kBAASpB,GACZ,MAAsC,oBAA3BJ,KAAKC,MAAM,KAAOG,IAO1BL,EAAAG,UAAAuB,oBAAWrB,EAAQC,GACtB,MAAsC,oBAA3BL,KAAKC,MAAM,KAAOG,KACsB,IAA3CJ,KAAKC,MAAM,KAAOG,GAAKmB,QAAQlB,IASpCN,EAAAG,UAAAwB,gBACH,OAAOhB,OAAOC,KAAKX,KAAKC,OAAO0B,QAW5B5B,EAAAG,UAAA0B,iBAAQC,GACX,IAAK,IAAIzB,KAAOJ,KAAKC,MACjB4B,EAASzB,EAAIW,UAAU,GAAIf,KAAKC,MAAMG,OA7FlD","sourcesContent":["/*\n* This class represents the class definition.\n*/\nexport class HashTable<T, L> {\n    private table: any;\n\n    constructor() {\n        this.table = {};\n    }\n\n    public put(key: T, value: L): HashTable<T, L> {\n        this.table['v_' + key] = value;\n        return this;\n    }\n\n    public get(key: T): L {\n        return this.table['v_' + key];\n    }\n\n    public getAll(): L[] {\n        const vector = Array.from(Object.keys(this.table), k => this.table[k]);\n        return vector;\n    }\n\n    public getKeys(): string[] {\n        const keys = Array.from(Object.keys(this.table), k => k.substring(2));\n        return keys;\n    }\n\n    public has(key: T): boolean {\n        if (typeof this.table['v_' + key] !== 'undefined') {\n            return true;\n        }\n        return false;\n    }\n\n    public remove(key: T): HashTable<T, L> {\n        delete this.table['v_' + key];\n        return this;\n    }\n\n    public putArray(key: T, value: L): HashTable<T, L> {\n        if (typeof this.table['a_' + key] === 'undefined') {\n            this.table['a_' + key] = [];\n        }\n        this.table['a_' + key].push(value);\n        return this;\n    }\n\n    public getArray(key: T): L {\n        if (typeof this.table['a_' + key] === 'undefined') {\n            this.table['a_' + key] = [];\n        }\n        return this.table['a_' + key];\n    }\n\n    public removeArray(key: T, value: L): HashTable<T, L> {\n        if (typeof this.table['a_' + key] !== 'undefined') {\n            this.table['a_' + key].splice(this.table['a_' + key].indexOf(value), 1);\n        }\n        return this;\n    }\n\n    public hasArray(key: T): boolean {\n        if (typeof this.table['a_' + key] !== 'undefined') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public hasinArray(key: T, value: L): boolean {\n        if (typeof this.table['a_' + key] !== 'undefined') {\n            if (this.table['a_' + key].indexOf(value) !== -1) {\n                return true;\n            }\n            return false;\n        } else {\n            return false;\n        }\n    }\n\n    public size(): number {\n        return Object.keys(this.table).length;\n    }\n\n    /***************************************************/\n    // ForEach Function\n    // forEach(callback: function(key,value) )\n    // @callback: A Callback function use to iterate the Object  \n    //\n    // Iterate all objects Hashtable\n    // A used like arguments in the callback function\n    /***************************************************/\n    public forEach(callback): void {\n        for (let key in this.table) {\n            callback(key.substring(2), this.table[key]);\n        }\n    }\n}\n"]}