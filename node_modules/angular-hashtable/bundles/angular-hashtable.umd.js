(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('angular-hashtable', ['exports'], factory) :
    (factory((global['angular-hashtable'] = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T, L
     */
    var /**
     * @template T, L
     */ HashTable = (function () {
        function HashTable() {
            this.table = {};
        }
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        HashTable.prototype.put = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.table['v_' + key] = value;
                return this;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        HashTable.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.table['v_' + key];
            };
        /**
         * @return {?}
         */
        HashTable.prototype.getAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ vector = Array.from(Object.keys(this.table), function (k) { return _this.table[k]; });
                return vector;
            };
        /**
         * @return {?}
         */
        HashTable.prototype.getKeys = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ keys = Array.from(Object.keys(this.table), function (k) { return k.substring(2); });
                return keys;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        HashTable.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (typeof this.table['v_' + key] !== 'undefined') {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        HashTable.prototype.remove = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete this.table['v_' + key];
                return this;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        HashTable.prototype.putArray = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (typeof this.table['a_' + key] === 'undefined') {
                    this.table['a_' + key] = [];
                }
                this.table['a_' + key].push(value);
                return this;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        HashTable.prototype.getArray = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (typeof this.table['a_' + key] === 'undefined') {
                    this.table['a_' + key] = [];
                }
                return this.table['a_' + key];
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        HashTable.prototype.removeArray = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (typeof this.table['a_' + key] !== 'undefined') {
                    this.table['a_' + key].splice(this.table['a_' + key].indexOf(value), 1);
                }
                return this;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        HashTable.prototype.hasArray = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (typeof this.table['a_' + key] !== 'undefined') {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        HashTable.prototype.hasinArray = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (typeof this.table['a_' + key] !== 'undefined') {
                    if (this.table['a_' + key].indexOf(value) !== -1) {
                        return true;
                    }
                    return false;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        HashTable.prototype.size = /**
         * @return {?}
         */
            function () {
                return Object.keys(this.table).length;
            };
        /**
         * ***********************************************
         * @param {?} callback
         * @return {?}
         */
        HashTable.prototype.forEach = /**
         * ***********************************************
         * @param {?} callback
         * @return {?}
         */
            function (callback) {
                for (var /** @type {?} */ key in this.table) {
                    callback(key.substring(2), this.table[key]);
                }
            };
        return HashTable;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.HashTable = HashTable;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oYXNodGFibGUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLWhhc2h0YWJsZS9saWIvYW5ndWxhci1oYXNodGFibGUuY2xhc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogVGhpcyBjbGFzcyByZXByZXNlbnRzIHRoZSBjbGFzcyBkZWZpbml0aW9uLlxuKi9cbmV4cG9ydCBjbGFzcyBIYXNoVGFibGU8VCwgTD4ge1xuICAgIHByaXZhdGUgdGFibGU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhYmxlID0ge307XG4gICAgfVxuXG4gICAgcHVibGljIHB1dChrZXk6IFQsIHZhbHVlOiBMKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgdGhpcy50YWJsZVsndl8nICsga2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KGtleTogVCk6IEwge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJsZVsndl8nICsga2V5XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWxsKCk6IExbXSB7XG4gICAgICAgIGNvbnN0IHZlY3RvciA9IEFycmF5LmZyb20oT2JqZWN0LmtleXModGhpcy50YWJsZSksIGsgPT4gdGhpcy50YWJsZVtrXSk7XG4gICAgICAgIHJldHVybiB2ZWN0b3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEtleXMoKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLnRhYmxlKSwgayA9PiBrLnN1YnN0cmluZygyKSk7XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYXMoa2V5OiBUKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJsZVsndl8nICsga2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlKGtleTogVCk6IEhhc2hUYWJsZTxULCBMPiB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRhYmxlWyd2XycgKyBrZXldO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgcHV0QXJyYXkoa2V5OiBULCB2YWx1ZTogTCk6IEhhc2hUYWJsZTxULCBMPiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVbJ2FfJyArIGtleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYmxlWydhXycgKyBrZXldLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QXJyYXkoa2V5OiBUKTogTCB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVbJ2FfJyArIGtleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50YWJsZVsnYV8nICsga2V5XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlQXJyYXkoa2V5OiBULCB2YWx1ZTogTCk6IEhhc2hUYWJsZTxULCBMPiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJsZVsnYV8nICsga2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVbJ2FfJyArIGtleV0uc3BsaWNlKHRoaXMudGFibGVbJ2FfJyArIGtleV0uaW5kZXhPZih2YWx1ZSksIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYXNBcnJheShrZXk6IFQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaGFzaW5BcnJheShrZXk6IFQsIHZhbHVlOiBMKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWJsZVsnYV8nICsga2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhYmxlWydhXycgKyBrZXldLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudGFibGUpLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8vIEZvckVhY2ggRnVuY3Rpb25cbiAgICAvLyBmb3JFYWNoKGNhbGxiYWNrOiBmdW5jdGlvbihrZXksdmFsdWUpIClcbiAgICAvLyBAY2FsbGJhY2s6IEEgQ2FsbGJhY2sgZnVuY3Rpb24gdXNlIHRvIGl0ZXJhdGUgdGhlIE9iamVjdCAgXG4gICAgLy9cbiAgICAvLyBJdGVyYXRlIGFsbCBvYmplY3RzIEhhc2h0YWJsZVxuICAgIC8vIEEgdXNlZCBsaWtlIGFyZ3VtZW50cyBpbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIHB1YmxpYyBmb3JFYWNoKGNhbGxiYWNrKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRhYmxlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhrZXkuc3Vic3RyaW5nKDIpLCB0aGlzLnRhYmxlW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7UUFBQTtRQUdJO1lBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDbkI7Ozs7OztRQUVNLHVCQUFHOzs7OztzQkFBQyxHQUFNLEVBQUUsS0FBUTtnQkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUMvQixPQUFPLElBQUksQ0FBQzs7Ozs7O1FBR1QsdUJBQUc7Ozs7c0JBQUMsR0FBTTtnQkFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDOzs7OztRQUczQiwwQkFBTTs7Ozs7Z0JBQ1QscUJBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztnQkFDdkUsT0FBTyxNQUFNLENBQUM7Ozs7O1FBR1gsMkJBQU87Ozs7Z0JBQ1YscUJBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFBLENBQUMsQ0FBQztnQkFDdEUsT0FBTyxJQUFJLENBQUM7Ozs7OztRQUdULHVCQUFHOzs7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