/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T, L
 */
class HashTable {
    constructor() {
        this.table = {};
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    put(key, value) {
        this.table['v_' + key] = value;
        return this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return this.table['v_' + key];
    }
    /**
     * @return {?}
     */
    getAll() {
        const /** @type {?} */ vector = Array.from(Object.keys(this.table), k => this.table[k]);
        return vector;
    }
    /**
     * @return {?}
     */
    getKeys() {
        const /** @type {?} */ keys = Array.from(Object.keys(this.table), k => k.substring(2));
        return keys;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        if (typeof this.table['v_' + key] !== 'undefined') {
            return true;
        }
        return false;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        delete this.table['v_' + key];
        return this;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    putArray(key, value) {
        if (typeof this.table['a_' + key] === 'undefined') {
            this.table['a_' + key] = [];
        }
        this.table['a_' + key].push(value);
        return this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getArray(key) {
        if (typeof this.table['a_' + key] === 'undefined') {
            this.table['a_' + key] = [];
        }
        return this.table['a_' + key];
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    removeArray(key, value) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            this.table['a_' + key].splice(this.table['a_' + key].indexOf(value), 1);
        }
        return this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    hasArray(key) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    hasinArray(key, value) {
        if (typeof this.table['a_' + key] !== 'undefined') {
            if (this.table['a_' + key].indexOf(value) !== -1) {
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    size() {
        return Object.keys(this.table).length;
    }
    /**
     * ***********************************************
     * @param {?} callback
     * @return {?}
     */
    forEach(callback) {
        for (let /** @type {?} */ key in this.table) {
            callback(key.substring(2), this.table[key]);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HashTable };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oYXNodGFibGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXItaGFzaHRhYmxlL2xpYi9hbmd1bGFyLWhhc2h0YWJsZS5jbGFzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIGNsYXNzIGRlZmluaXRpb24uXG4qL1xuZXhwb3J0IGNsYXNzIEhhc2hUYWJsZTxULCBMPiB7XG4gICAgcHJpdmF0ZSB0YWJsZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB7fTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHV0KGtleTogVCwgdmFsdWU6IEwpOiBIYXNoVGFibGU8VCwgTD4ge1xuICAgICAgICB0aGlzLnRhYmxlWyd2XycgKyBrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBUKTogTCB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxlWyd2XycgKyBrZXldO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGwoKTogTFtdIHtcbiAgICAgICAgY29uc3QgdmVjdG9yID0gQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLnRhYmxlKSwgayA9PiB0aGlzLnRhYmxlW2tdKTtcbiAgICAgICAgcmV0dXJuIHZlY3RvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0S2V5cygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKE9iamVjdC5rZXlzKHRoaXMudGFibGUpLCBrID0+IGsuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfVxuXG4gICAgcHVibGljIGhhcyhrZXk6IFQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWyd2XycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoa2V5OiBUKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGFibGVbJ3ZfJyArIGtleV07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBwdXRBcnJheShrZXk6IFQsIHZhbHVlOiBMKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFibGVbJ2FfJyArIGtleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBcnJheShrZXk6IFQpOiBMIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxlWydhXycgKyBrZXldO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVBcnJheShrZXk6IFQsIHZhbHVlOiBMKTogSGFzaFRhYmxlPFQsIEw+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy50YWJsZVsnYV8nICsga2V5XS5zcGxpY2UodGhpcy50YWJsZVsnYV8nICsga2V5XS5pbmRleE9mKHZhbHVlKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGhhc0FycmF5KGtleTogVCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFibGVbJ2FfJyArIGtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBoYXNpbkFycmF5KGtleTogVCwgdmFsdWU6IEwpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhYmxlWydhXycgKyBrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFibGVbJ2FfJyArIGtleV0uaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50YWJsZSkubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLy8gRm9yRWFjaCBGdW5jdGlvblxuICAgIC8vIGZvckVhY2goY2FsbGJhY2s6IGZ1bmN0aW9uKGtleSx2YWx1ZSkgKVxuICAgIC8vIEBjYWxsYmFjazogQSBDYWxsYmFjayBmdW5jdGlvbiB1c2UgdG8gaXRlcmF0ZSB0aGUgT2JqZWN0ICBcbiAgICAvL1xuICAgIC8vIEl0ZXJhdGUgYWxsIG9iamVjdHMgSGFzaHRhYmxlXG4gICAgLy8gQSB1c2VkIGxpa2UgYXJndW1lbnRzIGluIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgcHVibGljIGZvckVhY2goY2FsbGJhY2spOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGFibGUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGtleS5zdWJzdHJpbmcoMiksIHRoaXMudGFibGVba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBO0lBR0k7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztLQUNuQjs7Ozs7O0lBRU0sR0FBRyxDQUFDLEdBQU0sRUFBRSxLQUFRO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQzs7Ozs7O0lBR1QsR0FBRyxDQUFDLEdBQU07UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDOzs7OztJQUczQixNQUFNO1FBQ1QsdUJBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RSxPQUFPLE1BQU0sQ0FBQzs7Ozs7SUFHWCxPQUFPO1FBQ1YsdUJBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxPQUFPLElBQUksQ0FBQzs7Ozs7O0lBR1QsR0FBRyxDQUFDLEdBQU07UUFDYixJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssV0FBVyxF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